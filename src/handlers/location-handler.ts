import { Context, InlineKeyboard } from 'grammy';
import { OpenAIClient, LocationFact } from "../services/openai-client";
import { Logger } from "../lib/logger";
import { RateLimiter } from "../lib/rate-limiter";

export class LocationHandler {
  private openaiClient: OpenAIClient;
  private rateLimiter: RateLimiter;

  constructor(openaiApiKey: string) {
    this.openaiClient = new OpenAIClient(openaiApiKey);
    this.rateLimiter = new RateLimiter(1, 10000); // 1 –∑–∞–ø—Ä–æ—Å –≤ 10 —Å–µ–∫—É–Ω–¥
  }

  async handleLocation(ctx: Context): Promise<void> {
    try {
      const chatId = ctx.chat?.id;
      const userId = ctx.from?.id;
      const location = ctx.message?.location;

      if (!chatId || !userId || !location) {
        Logger.warn('location_handler', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ', {
          chatId,
          userId,
          hasLocation: !!location,
        });
        return;
      }

      const { latitude, longitude } = location;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (!this.validateCoordinates(latitude, longitude)) {
        await ctx.reply(
          '‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.'
        );
        return;
      }

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
      Logger.info('location_received', '–ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        chatId,
        userId,
        latitude,
        longitude,
        timestamp: new Date().toISOString(),
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
      const rateLimitKey = `user_${userId}`;
      if (!this.rateLimiter.isAllowed(rateLimitKey)) {
        const remainingTime = this.rateLimiter.getRemainingTime(rateLimitKey);
        const seconds = Math.ceil(remainingTime / 1000);
        await ctx.reply(`‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${seconds} —Å–µ–∫—É–Ω–¥.`);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const processingMsg = await ctx.reply('üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ...');

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç OpenAI
        const fact: LocationFact = await this.openaiClient.getFactForLocation(latitude, longitude);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç—É
        const keyboard = new InlineKeyboard().url(
          'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
          this.buildMapUrl(latitude, longitude)
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await ctx.reply(`‚ú® **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**\n\n${fact.fact}`, {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
        });

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await ctx.api.deleteMessage(chatId, processingMsg.message_id);

        Logger.info('location_processed', '–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', {
          chatId,
          userId,
          latitude,
          longitude,
          factLength: fact.fact.length,
        });
      } catch (error) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await ctx.api.deleteMessage(chatId, processingMsg.message_id);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorMessage =
          error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå ${errorMessage}`);

        Logger.error('location_processing_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏', {
          chatId,
          userId,
          latitude,
          longitude,
          error: errorMessage,
        });
      }
    } catch (error) {
      Logger.error('location_handler_error', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ª–æ–∫–∞—Ü–∏–∏', {
        error: error instanceof Error ? error.message : String(error),
      });

      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private validateCoordinates(latitude: number, longitude: number): boolean {
    return (
      typeof latitude === 'number' &&
      typeof longitude === 'number' &&
      latitude >= -90 &&
      latitude <= 90 &&
      longitude >= -180 &&
      longitude <= 180 &&
      !isNaN(latitude) &&
      !isNaN(longitude)
    );
  }

  private buildMapUrl(latitude: number, longitude: number): string {
    return `https://www.google.com/maps?q=${latitude},${longitude}`;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ rate limiter (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
  cleanup(): void {
    this.rateLimiter.cleanup();
  }
}
