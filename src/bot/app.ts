import { Bot, Context, session } from 'grammy';
import { LocationHandler } from "../handlers/location-handler";
import { Logger } from "../lib/logger";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface SessionData {
  isLiveLocationActive: boolean;
  lastFactSent: number;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Å—Å–∏–π
interface MyContext extends Context {
  session: SessionData;
}

export class BotApp {
  private bot: Bot<MyContext>;
  private locationHandler: LocationHandler;

  constructor(token: string, openaiApiKey: string) {
    this.bot = new Bot<MyContext>(token);
    this.locationHandler = new LocationHandler(openaiApiKey);

    this.setupMiddleware();
    this.setupCommands();
    this.setupHandlers();
    this.setupErrorHandling();
  }

  private setupMiddleware(): void {
    // Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
    this.bot.use(
      session({
        initial: (): SessionData => ({
          isLiveLocationActive: false,
          lastFactSent: 0,
        }),
      })
    );

    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      const updateType = this.getUpdateType(ctx);
      Logger.info('bot_request', '–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å', {
        updateType,
        chatId: ctx.chat?.id,
        userId: ctx.from?.id,
      });

      try {
        await next();
      } finally {
        const duration = Date.now() - start;
        Logger.info('bot_response', '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
          updateType,
          chatId: ctx.chat?.id,
          userId: ctx.from?.id,
          duration,
        });
      }
    });
  }

  private getUpdateType(ctx: MyContext): string {
    if (ctx.message) return 'message';
    if (ctx.editedMessage) return 'edited_message';
    if (ctx.channelPost) return 'channel_post';
    if (ctx.editedChannelPost) return 'edited_channel_post';
    if (ctx.inlineQuery) return 'inline_query';
    if (ctx.chosenInlineResult) return 'chosen_inline_result';
    if (ctx.callbackQuery) return 'callback_query';
    if (ctx.shippingQuery) return 'shipping_query';
    if (ctx.preCheckoutQuery) return 'pre_checkout_query';
    if (ctx.poll) return 'poll';
    if (ctx.pollAnswer) return 'poll_answer';
    if (ctx.myChatMember) return 'my_chat_member';
    if (ctx.chatMember) return 'chat_member';
    if (ctx.chatJoinRequest) return 'chat_join_request';
    return 'unknown';
  }

  private setupCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.command('start', async (ctx) => {
      const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö.

üìç **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é (–Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
2. –Ø –Ω–∞–π–¥—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ
3. –ü–æ–ª—É—á–∏—à—å —Ñ–∞–∫—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É

üîç **–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å live-–ª–æ–∫–∞—Ü–∏—é (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)

–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

      await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.command('help', async (ctx) => {
      const helpMessage = `üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üìç **–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏:**
‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –≤ —á–∞—Ç–µ
‚Ä¢ –í—ã–±–µ—Ä–∏ "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é

üéØ **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:**
‚Ä¢ –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
‚Ä¢ –î–∞—ë—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É

‚ö° **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ù–µ —á–∞—â–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
‚Ä¢ –§–∞–∫—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

üÜò **–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`;

      await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stop
    this.bot.command('stop', async (ctx) => {
      if (ctx.session.isLiveLocationActive) {
        ctx.session.isLiveLocationActive = false;
        await ctx.reply('üõë Live-–ª–æ–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.');
        Logger.info('live_location_stopped', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª live-–ª–æ–∫–∞—Ü–∏—é', {
          chatId: ctx.chat?.id,
          userId: ctx.from?.id,
        });
      } else {
        await ctx.reply('‚ÑπÔ∏è Live-–ª–æ–∫–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞.');
      }
    });
  }

  private setupHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏
    this.bot.on('message:location', async (ctx) => {
      await this.locationHandler.handleLocation(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    this.bot.on('message:text', async (ctx) => {
      if (ctx.message.text.startsWith('/')) return;

      await ctx.reply(
        'üìç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–µ!\n\n' +
          '–ù–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –≤—ã–±–µ—Ä–∏ "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ".'
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (ctx) => {
      if (ctx.message.location) return; // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ

      await ctx.reply(
        'üìç –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã.\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
    });
  }

  private setupErrorHandling(): void {
    this.bot.catch((err) => {
      const error = err.error as Error;
      Logger.error('bot_error', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ', {
        error: error.message,
        stack: error.stack,
      });
    });
  }

  // –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
  async startPolling(): Promise<void> {
    Logger.info('bot_startup', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling');

    try {
      try {
        await this.bot.api.deleteWebhook();
        Logger.info('bot_startup', 'Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      } catch (error) {
        if (error instanceof Error && error.message.includes('404')) {
          Logger.info('bot_startup', 'Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫');
        } else {
          Logger.warn('bot_startup', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook', {
            error: error instanceof Error ? error.message : String(error),
          });
        }
      }

      await this.bot.start();
      Logger.info('bot_startup', '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
    } catch (error) {
      Logger.error('bot_startup_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞', {
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook
  async startWebhook(port: number, webhookUrl: string): Promise<void> {
    Logger.info('bot_startup', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook', { port, webhookUrl });

    try {
      await this.bot.api.setWebhook(webhookUrl);
      Logger.info('bot_startup', 'Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', { webhookUrl });

      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
      await this.startPolling();
    } catch (error) {
      Logger.error('bot_startup_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ webhook', {
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop(): Promise<void> {
    Logger.info('bot_shutdown', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞');
    await this.bot.stop();
  }
}
